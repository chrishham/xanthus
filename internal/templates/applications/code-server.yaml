# Code Server Helm Values Template
# This template supports placeholder substitution for dynamic deployment

# Image configuration
image:
  repository: codercom/code-server
  tag: "{{VERSION}}"
  pullPolicy: Always

# Service configuration
service:
  type: ClusterIP
  port: 8080

# Ingress configuration with Traefik
ingress:
  enabled: true
  annotations:
    traefik.ingress.kubernetes.io/router.entrypoints: websecure
    traefik.ingress.kubernetes.io/router.tls: "true"
  hosts:
    - host: "{{SUBDOMAIN}}.{{DOMAIN}}"
      paths:
        - /
  tls:
    - secretName: "{{DOMAIN}}-tls"
      hosts:
        - "{{SUBDOMAIN}}.{{DOMAIN}}"

# Persistence configuration
persistence:
  enabled: true
  size: 10Gi
  accessMode: ReadWriteOnce

# Resource configuration
resources:
  limits:
    cpu: "2"
    memory: "4Gi"
  requests:
    cpu: "100m"
    memory: "128Mi"

# Security context
securityContext:
  enabled: true
  fsGroup: 1000
  runAsUser: 1000

# Volume permissions
volumePermissions:
  enabled: true
  securityContext:
    runAsUser: 0

# Extra volumes for VS Code settings
extraVolumes:
  - name: vscode-settings
    configMap:
      name: "{{RELEASE_NAME}}-vscode-settings"
      optional: true

# Extra volume mounts for VS Code settings
extraVolumeMounts:
  - name: vscode-settings
    mountPath: /tmp/vscode-settings
    readOnly: true

# Init container to copy VS Code settings and install packages
extraInitContainers: |
  - name: setup-environment
    image: ubuntu:22.04
    imagePullPolicy: IfNotPresent
    command:
      - bash
      - -c
      - |
        set -e
        echo "üöÄ Starting environment setup..."
        
        # Update package lists
        echo "üì¶ Updating package lists..."
        apt-get update
        
        # Install basic packages
        echo "üîß Installing build-essential and ripgrep..."
        apt-get install -y build-essential ripgrep curl
        
        # Create user if it doesn't exist and setup home directory
        if ! id -u coder > /dev/null 2>&1; then
          useradd -m -u 1000 -s /bin/bash coder
        fi
        
        # Switch to coder user for remaining operations
        su - coder << 'EOF'
        set -e
        cd /home/coder
        
        # Install Volta (Node.js version manager)
        echo "üåê Installing Volta..."
        curl https://get.volta.sh | bash
        
        # Setup Volta environment
        export VOLTA_HOME="$HOME/.volta"
        export PATH="$VOLTA_HOME/bin:$PATH"
        
        # Add to bashrc
        echo 'export VOLTA_HOME="$HOME/.volta"' >> ~/.bashrc
        echo 'export PATH="$VOLTA_HOME/bin:$PATH"' >> ~/.bashrc
        
        # Install Node.js via Volta
        echo "üì¶ Installing Node.js..."
        ~/.volta/bin/volta install node
        
        # Install global npm packages
        echo "üîß Installing Claude Code and ccusage..."
        ~/.volta/bin/npm install -g @anthropic-ai/claude-code
        ~/.volta/bin/npm install -g ccusage
        
        # Install Go
        echo "üêπ Installing Go..."
        ARCH=$(uname -m)
        case "$ARCH" in
          x86_64) ARCH="amd64" ;;
          aarch64 | arm64) ARCH="arm64" ;;
          *) echo "‚ùå Unsupported architecture: $ARCH"; exit 1 ;;
        esac
        
        # Get latest Go version
        LATEST_VERSION=$(curl -s https://go.dev/dl/ | grep -oP "go[0-9]+\.[0-9]+(\.[0-9]+)?\.linux-${ARCH}\.tar\.gz" | sed -E "s/\.linux-${ARCH}\.tar\.gz//" | sort -Vr | head -n1)
        TARFILE="${LATEST_VERSION}.linux-${ARCH}.tar.gz"
        DOWNLOAD_URL="https://go.dev/dl/${TARFILE}"
        
        echo "üîΩ Downloading Go ${LATEST_VERSION}..."
        curl -LO "$DOWNLOAD_URL"
        EOF
        
        # Extract Go as root (needs sudo equivalent)
        echo "üì¶ Extracting Go to /usr/local..."
        rm -rf /usr/local/go
        tar -C /usr/local -xzf /home/coder/${LATEST_VERSION}.linux-${ARCH}.tar.gz
        rm /home/coder/${LATEST_VERSION}.linux-${ARCH}.tar.gz
        
        # Continue as coder user
        su - coder << 'EOF'
        # Add Go to PATH
        echo 'export PATH=$PATH:/usr/local/go/bin' >> ~/.bashrc
        
        # Verify installations
        echo "‚úÖ Verifying installations..."
        /usr/local/go/bin/go version || echo "Go installation failed"
        ~/.volta/bin/node --version || echo "Node installation failed"
        ~/.volta/bin/npm --version || echo "NPM installation failed"
        EOF
        
        # Setup VS Code settings if available
        if [ -d /tmp/vscode-settings ]; then
          echo "üìù Copying VS Code settings..."
          mkdir -p /home/coder/.local/share/code-server/User
          cp -f /tmp/vscode-settings/settings.json /home/coder/.local/share/code-server/User/settings.json 2>/dev/null || echo "No settings.json found, skipping..."
          cp -f /tmp/vscode-settings/keybindings.json /home/coder/.local/share/code-server/User/keybindings.json 2>/dev/null || echo "No keybindings.json found, skipping..."
        fi
        
        # Fix all permissions
        echo "üîí Fixing permissions..."
        chown -R 1000:1000 /home/coder
        
        echo "üéâ Environment setup complete!"
    securityContext:
      runAsUser: 0
    volumeMounts:
      - name: data
        mountPath: /home/coder
      - name: vscode-settings
        mountPath: /tmp/vscode-settings
        readOnly: true

# Pod annotations
podAnnotations: {}

# Node selector
nodeSelector: {}

# Tolerations
tolerations: []

# Affinity
affinity: {}

# Service account
serviceAccount:
  create: true
  annotations: {}
  name: ""

# Replica count
replicaCount: 1

# Extra environment variables
extraVars: []

# Extra arguments
extraArgs: []

# Extra ports
extraPorts: []

# Priority class name
priorityClassName: ""

# Image pull secrets
imagePullSecrets: []

# Full name override
fullnameOverride: ""

# Name override
nameOverride: ""

# Hostname override
hostnameOverride: ""

# Lifecycle hooks
lifecycle:
  enabled: false