var r=Object.defineProperty;var c=(s,e,t)=>e in s?r(s,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):s[e]=t;var i=(s,e,t)=>c(s,typeof e!="symbol"?e+"":e,t);import{aa as l}from"./Ce1HVTUQ.js";const p={loading:!1,loadingTitle:"Processing...",loadingMessage:"Please wait while the operation completes.",currentPage:"",modals:{}},n=l(p),y=(s,e)=>{n.update(t=>({...t,loading:!0,loadingTitle:s,loadingMessage:e}))},T=()=>{n.update(s=>({...s,loading:!1}))},f=s=>{n.update(e=>({...e,currentPage:s}))},w=s=>{n.update(e=>({...e,loadingTitle:s}))},m=s=>{n.update(e=>({...e,loadingMessage:s}))};class d extends Error{constructor(e,t,a){super(e),this.status=t,this.response=a,this.name="ApiError"}}class h{constructor(){i(this,"baseUrl","/api")}async get(e){const t=await fetch(`${this.baseUrl}${e}`,{method:"GET",headers:{"Content-Type":"application/json"}});return this.handleResponse(t)}async post(e,t){const a=await fetch(`${this.baseUrl}${e}`,{method:"POST",headers:{"Content-Type":"application/json"},body:t?JSON.stringify(t):void 0});return this.handleResponse(a)}async put(e,t){const a=await fetch(`${this.baseUrl}${e}`,{method:"PUT",headers:{"Content-Type":"application/json"},body:t?JSON.stringify(t):void 0});return this.handleResponse(a)}async delete(e){const t=await fetch(`${this.baseUrl}${e}`,{method:"DELETE",headers:{"Content-Type":"application/json"}});return this.handleResponse(t)}async handleResponse(e){if(!e.ok){let a=`HTTP ${e.status}: ${e.statusText}`;try{const o=await e.json();a=o.error||o.message||a}catch{}throw new d(a,e.status,e)}const t=e.headers.get("Content-Type");if(!t||!t.includes("application/json"))return{};try{return await e.json()}catch{return{}}}async legacyGet(e){const t=await fetch(e,{method:"GET",headers:{"Content-Type":"application/json"}});return this.handleResponse(t)}async legacyPost(e,t){const a=await fetch(e,{method:"POST",headers:{"Content-Type":"application/json"},body:t?JSON.stringify(t):void 0});return this.handleResponse(a)}async legacyDelete(e){const t=await fetch(e,{method:"DELETE",headers:{"Content-Type":"application/json"}});return this.handleResponse(t)}}const E=new h;export{E as a,w as b,T as c,m as d,f as e,y as s,n as u};
